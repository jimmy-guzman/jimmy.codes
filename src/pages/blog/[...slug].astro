---
import { getCollection, render } from "astro:content";

import { BASE_TITLE } from "@/configs/pages";
import { urls } from "@/configs/urls";
import BaseLayout from "@/layouts/BaseLayout.astro";
import ContentLayout from "@/layouts/ContentLayout.astro";
import PageLayout from "@/layouts/PageLayout.astro";
import { lastModified, readingTime } from "@/utils/content";
import { shortTitle } from "@/utils/post";
import { getRelatedByTags } from "@/utils/related";

export async function getStaticPaths() {
  const posts = await getCollection("posts");

  return posts.map((post) => {
    const updatedDate =
      post.data.updatedDate ??
      (post.filePath ? lastModified(post.filePath) : undefined);

    const relatedPosts = getRelatedByTags(posts, post);

    return {
      params: { slug: post.slug },
      props: {
        post,
        updatedDate,
        relatedPosts,
      },
    };
  });
}

const { post, relatedPosts, updatedDate } = Astro.props;
const { Content } = await render(post);

const postUrl = `${urls.site}/blog/${post.slug}`;
const minutes = readingTime(post.body);
const datePublished = post.data.publishDate;
const dateModified = updatedDate ?? datePublished;
const timeRequired = minutes
  ? `PT${Math.max(1, Math.round(minutes))}M`
  : undefined;
const description = post.data.description;

const jsonLd = {
  "@type": "BlogPosting",
  "@id": `${postUrl}#article`,
  inLanguage: "en-US",
  headline: post.data.title,
  ...(description ? { description } : {}),
  author: { "@id": `${urls.site}/#person` },
  publisher: { "@id": `${urls.site}/#person` },
  datePublished,
  dateModified,
  url: postUrl,
  mainEntityOfPage: { "@id": `${postUrl}#webpage` },
  keywords: post.data.keywords,
  isAccessibleForFree: true,
  ...(timeRequired ? { timeRequired } : {}),
};
---

<BaseLayout
  title={`${post.data.title} | ${BASE_TITLE}`}
  description={description}
  keywords={post.data.keywords}
  extraLd={[jsonLd]}
>
  <PageLayout heading={shortTitle(post)}>
    <ContentLayout
      tags={post.data.tags}
      publishDate={datePublished}
      updatedDate={updatedDate}
      back={{
        href: "/blog",
        label: "Back to all posts",
      }}
      minutes={minutes}
      filePath={post.filePath}
      relatedPosts={relatedPosts}
    >
      <Content />
    </ContentLayout>
  </PageLayout>
</BaseLayout>
